                COMP 40 Lab: Points, lines, and planes
                         (for groups of four)



+--------------------------------------------------------+
|Keeper of the record:                                   |
|--------------------------------------------------------|
| Other group members:                                   |
|                                                        |
|                                                        |
|                                                        |
+--------------------------------------------------------+

You'll have about 40 minutes to answer the 11 questions below.
(Some questions are repetitive.)

The keeper of the record should fill in answers, submit, and mail
the submission to everyone in the group.

Part I: POINTS

  1. Using mathematics or metaphor, explain what a variable stands for. Your
     explanation should live in the world of ideas.  You may find it
     helpful to think of a particular example:

        int x;
        x = 9;
        x = x + 10;

     What kind of a thing does 'x' stand for?





  2. Is a ``variable'' a polymorphic idea?  If so, where's the polymorphism?
     If not, why not?





  3. Using mathematics or metaphor, explain what a pointer stands for.
     Your explanation should live in the world of ideas.  You may find
     it helpful to think of a particular example:

        int *p;
        p = malloc(sizeof(*p));
        assert(p != NULL);
        *p = 9;
        *p = *p + 10;

     What kind of a thing does '*p' stand for?





  4. Is a ``pointer'' a polymorphic idea?  If so, where's the
     polymorphism?  If not, why not?





Part II: LINES

  5. What, in the world of ideas, is an array?  (Don't forget
     parametric polymorphism:  How many type parameters are there and
     what do they stand for?  Is an array parametric in anything
     else?)





  6. You identify a variable by its name.  Array elements have no
     names.  How do you identify an element of an array?





  7. In the world of code, what would be a good representation of a
     single array element?  Can you use your answers to the questions
     above to argue your case?





  8. Given your answer to question 7, supposing you wanted to treat
     'array' as an abstract data type, what operations would you want
     to provide on single array elements?  What prototypes would the
     functions representing those operations have?  That is, what would
     the functions take as arguments and return as results?





Part III: PLANES

  9. What, in the world of ideas, is a two-dimensional array?





 10. How do you identify an element of a two-dimensional array?




PART IV: FROM LINES TO PLANES

 11. In your new homework assignment, you are asked to design and
     implement abstractions for two-dimensional arrays.  We are asking
     you not to implement two-dimensional arrays on the bare metal but
     rather to use a tool provided by Dave Hanson: the one-dimensional
     array.  The elements of the two-dimensional arrays should be set
     in one-to-one correspondence with elements of one or more
     one-dimensional arrays.

     The key question is this:

        - How do you relate each element in a two-dimensional array to
          a corresponding element in some one-dimensional array?

     A useful answer will probably contain a mix of C expressions and
     mathematics, or perhaps all mathematics.  Once you get a useful
     answer, and you can convince a skeptical listener that you have
     truly established a one-to-one correspondence, the rest of the
     design and implementation are easy.  (Your instructor knows of
     two useful answers based on two different implementation
     strategies.)

     How do you relate each element in a two-dimensional array to one
     and only one corresponding element in some one-dimensional array?

