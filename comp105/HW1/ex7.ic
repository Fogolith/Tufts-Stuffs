;Jake Austin
;HW1 ex 7

(define mod (m n) (- m(* n(/ m n))))        ;taken from textbook

;is prime checks if any value up to n/2 divides evenly into n
(define isPrime (n x) (if(> x (/ n 2)) 1 
                      (if(= 0 (mod n x)) 0 
                              (isPrime n (+ x 1)))))

;Error if n<0, else calls isPrime
(define prime? (n) (if(< n 0) (print 0) (isPrime n 2)))

;given 2 (initially) and n, count n down to 1 by checking if x is prime and
;recursively iterating x
(define findNth (x n) (if(= n 1) x 
                      (if(prime? (+ x 1)) (findNth (+ x 1) (- n 1)) 
                                          (findNth (+ x 1) n))))

;Error if n=<0, return 2 if n=1, else findNth
(define nthprime (n) (if(< n 0) (print 0)
                     (if(= n 0) (print 0)
                     (if(= n 1) 2 (findNth 2 n)))))

;adds nthPrime(n) + nthPrime(n-1) +---+ nthPrime(1) + 0
(define sumprimes (n) (if(< n 0) (print 0)
                      (if(= n 0) 0 
                      (+ (nthprime n) (sumprimes (- n 1))))))

;Taken from textbook
(define gcd (m n) (if(= n 0) m (gcd n (mod m n))))

;Error if m<0 or n<0, true if gcd(m n) = 1
(define relprime? (m n) (if(< m 0) (print 0)
                        (if(< n 0) (print 0)
                        (if(= 1 (gcd m n)) 1 0))))
