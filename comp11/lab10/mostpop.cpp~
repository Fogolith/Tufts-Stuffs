#include <iostream>
using namespace std;
/*
 * mostpop.cpp
 *
 *   Analyze a set of lists of friends to find which person(s)
 *   is most popular.
 *
 *   Input: a list of ten people the count of their friends and the names of their friends
 *  Format: person-name0  count1  friend1 friend2 .... friend_count0
 *          person-name1  count2  friend1 friend2 .... friend_count1
 *          ...
 *          person-name9  count2  friend1 friend2 .... friend_count9
 *
 *  Output: Person with most friends: name count
 *          Most common friend: name count
 *
 *    Date: Put date here
 *      By: Your name here
 *
 */

const int	NUM_PEOPLE = 10;

// Data Structure for people goes here

struct Person {
	string	name;
	int	numFriends;
	????	friends;		// What is the type?
};

void	readInData(Person[], int);
void	whoHasMostFriends(Person[], int);
void	whoIsMostFriended(Person[], int);

int main()
{
	
	Person	People[NUM_PEOPLE];	// the main array

	readInData(People, NUM_PEOPLE);		// get data
	whoHasMostFriends(People, NUM_PEOPLE);	// answer question one
	whoIsMostFriended(People, NUM_PEOPLE);	// answer question two
	return 0;
}

// readInData(Person[], int num)
//   purpose: read data from cin, populate array
//      args: array to fill, number to expect
//   
void readInData(Person List[], int num)
{

	// your code here	(remove this line!)
}

// whoHasMostFriends(Person[], int num)
//   purpose: find who in the list has the most friends
//      args: array to search, number of items
//    output: name and count for person with most
//      note: what if there is a tie?
//
void whoHasMostFriends(Person List[], int num)
{
	// your code here
}

// whoIsMostFriended(Person List[], int num)
//   purpose: find who in the friends lists is most common
//      args: array to search, number of items
//    output: name and count for person most often found
//      note: can there be a tie?
//
void whoIsMostFriended(Person List[], int num)
{
	// your code here
}
