#!/bin/sh

set -e    # halt on first error

link=all  # link all binaries by default
linked=no # track whether we linked

case $1 in  
  -nolink) link=none ; shift ;;  # don't link
  -link)   link="$2" ; shift ; shift ;;  # link only one binary
esac

# compile and link against CII40
CIIFLAGS=`pkg-config --cflags cii40`
CIILIBS=`pkg-config --libs cii40`

# compile and link against course software and netpbm library
CFLAGS="-I. -I/comp/40/include $CIIFLAGS"
LIBS="$CIILIBS -l40locality -lm -lbitpack"
LFLAGS="-L/comp/40/lib64"

# these flags max out warnings and debug info
FLAGS="-g -O0 -Wall -Wextra -Werror -Wfatal-errors -std=c99 -pedantic"
# what's up with the -O0 option? in other compile script it's -O ...?
rm -f *.o  # make sure no object files are left hanging around

case $# in
  0) set *.c ;; # if no args are given, compile all .c files
esac

# compile each argument to a .o file
for cfile 
do
  gcc $FLAGS $CFLAGS -c $cfile
done
##exit
########### the middle part is different for each assignment
# link together .o files + libraries to make executable binaries
# using one case statement per executable binary

case $link in
    all|test1) gcc $FLAGS $LFLAGS -o umasm \
            umasm-main.o -lumasm umsections.o ummacros.o \
            -llua5.1-lpeg -llua \
            /comp/40/lib64/libbitpack.a $LIBS 
            linked=yes ;;
esac

# note to self- i added the -lpnmrdr $LIBS for debugging. if you 
# are reading this and it's still here you should check that it's
# really needed


# error if asked to link something we didn't recognize
if [ $linked = no ]; then
  case $link in  # if the -link option makes no sense, complain 
    none) ;; # OK, do nothing
    *) echo "`basename $0`: don't know how to link $link" 1>&2 ; exit 1 ;;
  esac
fi
