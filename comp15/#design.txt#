Design Doc	Customers will be loaded into a linked list in the SUPERMARKET class, and a CUSTOMER will have an associated name, number of items, arrival time, checkout time, and waiting time. In addition each customer will have a bool stating whether or not they are eligible for an express lane. With every iteration of TIME, the list will be checked for arriving customers, and any customer arriving at the current time will switch from the holding queue to enter the checkout QUEUE. For the mini mart simulation, an arriving customer enters the single queue, and so is added to the end of a linked list. The -YÅ¥frontÅ° of this list will represent the front of the line, and another pointer will represent the register. When a customer reaches the register their wait time is over. Customers will stay at the register until the (current time - #items)=checkout time, at which point their info will be printed and they will be removed from the register so that the next customer may come from the front of the line. With each iteration of time, the program will have to add any arriving customers, and remove customers that have finished checking out. Any customer in line that is not at the register simply hangs tight until they arrive at the register, at which point their wait time may be calculated and they can begin checking out. 	For the supermarket with 4 regular registers, each with an associated queue, the added step of calculating shortest line must be added. For an arriving customer, before they are linked to a queue they must compare the lengths and choose the shortest one. A queueÜ¢s length will be the total number of items waiting to be checked out, so that one customer with 50 items is a longer line than 3 customers with 10 each. Once stationed in a queue, the simulation will run as before, just with 4 queues running in parallel. 	The express supermarket adds a further level of specification, and arriving customers will first have to be categorized as express or not express (the customer class has a Boolean for this), and then enter the shorter, appropriate lane. Once in a queue this simulation will run the same as the previous ones.  	The fourth supermarket, in which one queue leads to four separate registers, will be handled with additional pointers. The queue will not operate any differently than it has in previous simulations (taking in new customers at their arrival time), but in addition to a -YÜ¥frontÜ° of the line, there will be four pointers to represent the registers. A customer will leave the front of the line to enter any available register, and front will set to the next customer in the queue. This way, regardless of which register finishes at any given time, it will take the customer at Ü¥frontÜ° next. The registers will operate one after the other, so if multiple customers check out at the same time, multiple customers may be brought to the registers, as well. 